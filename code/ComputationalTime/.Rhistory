A1 = t(A)
A1 = A1[rowSums(A1)!=0,]
A1 = A1[,sample(ncol(A1),500)]
A1 = A1[sample(nrow(A1),5000),]
k = 4
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
# Chunk 6
# 10000/100
set.seed(1)
A1 = t(A)
A1 = A1[rowSums(A1)!=0,]
A1 = A1[,sample(ncol(A1),100)]
A1 = A1[sample(nrow(A1),10000),]
# Chunk 1
library(dplyr)
library(patchwork)
library(ggplot2)
source("../Algorithm.R")
load('../../data/He/subtree.RData')
# Chunk 2
# 1000/100
set.seed(1)
A1 = t(A)
A1 = A1[,sample(ncol(A1),100)]
A1 = A1[sample(nrow(A1),1000),]
result = matrix(0,nrow = 6, ncol = 7)
result[1,1] = system.time(rsim(A1))[1]
result[1,2] = system.time(GMPR(A1))[1]
result[1,3] = system.time(med(A1))[1]
result[1,4] = system.time(css(A1))[1]
# Chunk 1
library(dplyr)
library(patchwork)
library(ggplot2)
source("../Algorithm.R")
# Chunk 2
```{r}
library(dplyr)
library(biomformat)
library(stringr)
library(ape)
library(phyloseq)
source("../Algorithm.R")
source("../Algorithm.R")
# Chunk 1
library(dplyr)
library(biomformat)
library(stringr)
library(ape)
library(phyloseq)
source("../Algorithm.R")
# Chunk 2
##data preprocessing
filepath <- "../../data/Vangay/"
folders<-list.files(path = filepath)
filep<-paste(filepath,"/","reference-hit.biom", sep = "")
x = read_biom(filep)
treep<-paste(filepath,"/","insertion_tree.relabelled.tre", sep = "")
treefile = readChar(treep,file.info(treep)$size)
str_count(treefile, pattern = '; ')
treefile2 = gsub('; ','|',treefile)
tree = read.tree(text=treefile2)
nalength=is.na(tree$edge.length)
nonzerolength=tree$edge.length!=0
tree$edge.length[nalength]=sample(tree$edge.length[(!nalength)&nonzerolength], sum(nalength))
sum(tree$edge.length==0 & tree$edge[,2]<=length(tree$tip.label))
meta = read.delim(paste(filepath,"/","12080_20210508-071948.txt", sep = ""))
samplenames <- sapply(x$columns, function(y){y$id})
meta <- meta[meta$sample_name %in% samplenames,]
meta$bmi_class[meta$bmi_class=='Obese'] = 'Overweight'
otu <- sapply(x$rows, function(y){y$id})
drop_tips <- tree$tip.label[!(tree$tip.label %in% otu)]
tree <- ape::drop.tip(tree,drop_tips) %>% ape::as.phylo()
P <- sapply(x$data, function(y,subsamplenames){y[subsamplenames]}, subsamplenames = meta$sample_name)
colnames(P) <- otu
P = t(P)
A = P[rowSums(P)>0,]
# Chunk 3
# 1000/100
set.seed(1)
A1 = A
A1 = A1[,sample(ncol(A1),100)]
A1 = A1[sample(nrow(A1),1000),]
result = matrix(0,nrow = 6, ncol = 7)
result[1,1] = system.time(rsim(A1))[1]
result[1,2] = system.time(GMPR(A1))[1]
result[1,3] = system.time(med(A1))[1]
result[1,4] = system.time(css(A1))[1]
# 1000/100
set.seed(1)
A1 = A
A1 = A1[,sample(ncol(A1),100)]
A1 = A1[rowSums(A1)>0,]
A1 = A1[sample(nrow(A1),1000),]
result = matrix(0,nrow = 6, ncol = 7)
result[1,1] = system.time(rsim(A1))[1]
result[1,2] = system.time(GMPR(A1))[1]
result[1,3] = system.time(med(A1))[1]
result[1,4] = system.time(css(A1))[1]
css(A1)
View(css)
X = A1
X.css <- metagenomeSeq::newMRexperiment(X)
X.css <- cumNorm(X.css , p=cumNormStatFast(X.css))
View(A1)
sum(colSums(A1)==0)
# 1000/100
set.seed(1)
A1 = A
A1 = A1[sample(nrow(A1),1000),]
A1 = A1[,rowSums(A1)>0]
# 1000/100
set.seed(1)
A1 = A
A1 = A1[sample(nrow(A1),1000),]
A1 = A1[rowSums(A1)>0,]
A1 = A1[,colSums(A1)>0]
A1 = A1[,1:100]
result = matrix(0,nrow = 6, ncol = 7)
result[1,1] = system.time(rsim(A1))[1]
result[1,2] = system.time(GMPR(A1))[1]
result[1,3] = system.time(med(A1))[1]
result[1,4] = system.time(css(A1))[1]
result[1,5] = system.time(tmm(A1))[1]
result[1,6] = system.time(tss(A1))[1]
result[1,7] = system.time(uq(A1))[1]
View(result)
# 1000/500
set.seed(1)
A1 = A
A1 = A1[sample(nrow(A1),1000),]
A1 = A1[rowSums(A1)>0,]
A1 = A1[,colSums(A1)>0]
A1 = A1[,1:500]
k = 2
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
# 5000/100
set.seed(1)
A1 = A
A1 = A1[sample(nrow(A1),5000),]
A1 = A1[rowSums(A1)>0,]
A1 = A1[,colSums(A1)>0]
A1 = A1[,1:100]
k = 3
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
# 5000/500
set.seed(1)
A1 = A
A1 = A1[sample(nrow(A1),5000),]
A1 = A1[rowSums(A1)>0,]
A1 = A1[,colSums(A1)>0]
A1 = A1[,1:500]
k = 4
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
# 10000/100
set.seed(1)
A1 = A
A1 = A1[1:10000,]
A1 = A1[rowSums(A1)>0,]
A1 = A1[,colSums(A1)>0]
A1 = A1[,1:100]
k = 5
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
# 10000/500
set.seed(1)
A1 = A
A1 = A1[1:10000,]
A1 = A1[rowSums(A1)>0,]
A1 = A1[,colSums(A1)>0]
A1 = A1[,1:500]
k = 6
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
# 1000/100
set.seed(1)
A1 = A
A1 = A1[1:1000,]
A1 = A1[rowSums(A1)>0,]
A1 = A1[,colSums(A1)>0]
A1 = A1[,1:100]
#result = matrix(0,nrow = 6, ncol = 7)
result[1,1] = system.time(rsim(A1))[1]
result[1,2] = system.time(GMPR(A1))[1]
result[1,3] = system.time(med(A1))[1]
result[1,4] = system.time(css(A1))[1]
result[1,5] = system.time(tmm(A1))[1]
result[1,6] = system.time(tss(A1))[1]
result[1,7] = system.time(uq(A1))[1]
# 1000/500
set.seed(1)
A1 = A
A1 = A1[1:1000,]
A1 = A1[rowSums(A1)>0,]
A1 = A1[,colSums(A1)>0]
A1 = A1[,1:500]
k = 2
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
# 5000/100
set.seed(1)
A1 = A
A1 = A1[1:5000,]
A1 = A1[rowSums(A1)>0,]
A1 = A1[,colSums(A1)>0]
A1 = A1[,1:100]
k = 3
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
colnames(result) = c("RSim","GMPR","MED","CSS","TMM","TSS","UQ")
write.table(result,file = "compute_time.csv")
result = as.data.frame(result)
write.table(result,file = "compute_time.csv")
result = as.data.frame(result)
write.csv(result,file = "compute_time.csv")
length(seq(0,0.1,0.01))
library(dplyr)
library(biomformat)
library(stringr)
library(ape)
library(phyloseq)
source("../Algorithm.R")
##data preprocessing
filepath <- "../../data/Vangay/"
folders<-list.files(path = filepath)
filep<-paste(filepath,"/","reference-hit.biom", sep = "")
x = read_biom(filep)
treep<-paste(filepath,"/","insertion_tree.relabelled.tre", sep = "")
treefile = readChar(treep,file.info(treep)$size)
str_count(treefile, pattern = '; ')
treefile2 = gsub('; ','|',treefile)
tree = read.tree(text=treefile2)
nalength=is.na(tree$edge.length)
nonzerolength=tree$edge.length!=0
tree$edge.length[nalength]=sample(tree$edge.length[(!nalength)&nonzerolength], sum(nalength))
sum(tree$edge.length==0 & tree$edge[,2]<=length(tree$tip.label))
meta = read.delim(paste(filepath,"/","12080_20210508-071948.txt", sep = ""))
samplenames <- sapply(x$columns, function(y){y$id})
meta <- meta[meta$sample_name %in% samplenames,]
meta$bmi_class[meta$bmi_class=='Obese'] = 'Overweight'
otu <- sapply(x$rows, function(y){y$id})
drop_tips <- tree$tip.label[!(tree$tip.label %in% otu)]
tree <- ape::drop.tip(tree,drop_tips) %>% ape::as.phylo()
P <- sapply(x$data, function(y,subsamplenames){y[subsamplenames]}, subsamplenames = meta$sample_name)
colnames(P) <- otu
P = t(P)
A = P[rowSums(P)>0,]
# 1000/100
set.seed(1)
A1 = A
A1 = A1[1:1000,]
A1 = A1[rowSums(A1)>0,]
A1 = A1[,colSums(A1)>0]
A1 = A1[,1:100]
sum(rowSums(A1)==0)
sum(colSums(A1)==0)
result = matrix(0,nrow = 6, ncol = 7)
result[1,1] = system.time(rsim(A1))[1]
result[1,2] = system.time(GMPR(A1))[1]
result[1,3] = system.time(med(A1))[1]
result[1,4] = system.time(css(A1))[1]
result[1,5] = system.time(tmm(A1))[1]
result[1,6] = system.time(tss(A1))[1]
result[1,7] = system.time(uq(A1))[1]
# 1000/100
set.seed(1)
A1 = A
A1 = A1[,1:100]
A1 = A1[,colSums(A1)>0]
A1 = A1[rowSums(A1)>0,]
A1 = A1[1:1000,]
sum(rowSums(A1)==0)
sum(colSums(A1)==0)
result = matrix(0,nrow = 6, ncol = 7)
result[1,1] = system.time(rsim(A1))[1]
result[1,2] = system.time(GMPR(A1))[1]
result[1,3] = system.time(med(A1))[1]
result[1,4] = system.time(css(A1))[1]
result[1,5] = system.time(tmm(A1))[1]
result[1,6] = system.time(tss(A1))[1]
result[1,7] = system.time(uq(A1))[1]
# 1000/500
set.seed(1)
A1 = A
A1 = A1[,1:500]
A1 = A1[,colSums(A1)>0]
A1 = A1[rowSums(A1)>0,]
A1 = A1[1:1000,]
sum(rowSums(A1)==0)
sum(colSums(A1)==0)
k = 2
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
# 5000/100
set.seed(1)
A1 = A
A1 = A1[,1:100]
A1 = A1[,colSums(A1)>0]
A1 = A1[rowSums(A1)>0,]
A1 = A1[1:5000,]
sum(rowSums(A1)==0)
sum(colSums(A1)==0)
k = 3
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
# 5000/500
set.seed(1)
A1 = A
A1 = A1[,1:500]
A1 = A1[,colSums(A1)>0]
A1 = A1[rowSums(A1)>0,]
A1 = A1[1:5000,]
sum(rowSums(A1)==0)
sum(colSums(A1)==0)
k = 4
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
##data preprocessing
filepath <- "../../data/Vangay/"
folders<-list.files(path = filepath)
filep<-paste(filepath,"/","reference-hit.biom", sep = "")
x = read_biom(filep)
treep<-paste(filepath,"/","insertion_tree.relabelled.tre", sep = "")
treefile = readChar(treep,file.info(treep)$size)
str_count(treefile, pattern = '; ')
treefile2 = gsub('; ','|',treefile)
tree = read.tree(text=treefile2)
nalength=is.na(tree$edge.length)
nonzerolength=tree$edge.length!=0
tree$edge.length[nalength]=sample(tree$edge.length[(!nalength)&nonzerolength], sum(nalength))
sum(tree$edge.length==0 & tree$edge[,2]<=length(tree$tip.label))
meta = read.delim(paste(filepath,"/","12080_20210508-071948.txt", sep = ""))
samplenames <- sapply(x$columns, function(y){y$id})
meta <- meta[meta$sample_name %in% samplenames,]
meta$bmi_class[meta$bmi_class=='Obese'] = 'Overweight'
otu <- sapply(x$rows, function(y){y$id})
drop_tips <- tree$tip.label[!(tree$tip.label %in% otu)]
tree <- ape::drop.tip(tree,drop_tips) %>% ape::as.phylo()
P <- sapply(x$data, function(y,subsamplenames){y[subsamplenames]}, subsamplenames = meta$sample_name)
colnames(P) <- otu
P = t(P)
A = P[rowSums(P)>0,]
A = P[,colSums(P)>5000]
# 1000/100
set.seed(1)
A1 = A
A1 = A1[,1:100]
A1 = A1[,colSums(A1)>0]
A1 = A1[rowSums(A1)>0,]
A1 = A1[1:1000,]
sum(rowSums(A1)==0)
sum(colSums(A1)==0)
result = matrix(0,nrow = 6, ncol = 7)
result[1,1] = system.time(rsim(A1))[1]
result[1,2] = system.time(GMPR(A1))[1]
result[1,3] = system.time(med(A1))[1]
result[1,4] = system.time(css(A1))[1]
result[1,5] = system.time(tmm(A1))[1]
result[1,6] = system.time(tss(A1))[1]
result[1,7] = system.time(uq(A1))[1]
# 1000/500
set.seed(1)
A1 = A
A1 = A1[,1:500]
# 1000/500
set.seed(1)
A1 = A
A1 = A1[,1:300]
A1 = A1[,colSums(A1)>0]
A1 = A1[rowSums(A1)>0,]
A1 = A1[1:1000,]
sum(rowSums(A1)==0)
sum(colSums(A1)==0)
k = 2
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
# 5000/100
set.seed(1)
A1 = A
A1 = A1[,1:100]
A1 = A1[,colSums(A1)>0]
A1 = A1[rowSums(A1)>0,]
A1 = A1[1:5000,]
sum(rowSums(A1)==0)
sum(colSums(A1)==0)
k = 3
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
# 5000/500
set.seed(1)
A1 = A
A1 = A1[,1:300]
A1 = A1[,colSums(A1)>0]
A1 = A1[rowSums(A1)>0,]
A1 = A1[1:5000,]
sum(rowSums(A1)==0)
sum(colSums(A1)==0)
k = 4
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
# 10000/100
set.seed(1)
A1 = A
A1 = A1[,1:100]
A1 = A1[,colSums(A1)>0]
A1 = A1[rowSums(A1)>0,]
A1 = A1[1:10000,]
# 10000/100
set.seed(1)
A1 = A
A1 = A1[,1:100]
A1 = A1[,colSums(A1)>0]
#A1 = A1[rowSums(A1)>0,]
A1 = A1[1:10000,]
sum(rowSums(A1)==0)
sum(colSums(A1)==0)
k = 5
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
# 10000/500
set.seed(1)
A1 = A
A1 = A1[,1:300]
A1 = A1[,colSums(A1)>0]
A1 = A1[rowSums(A1)>0,]
A1 = A1[1:10000,]
sum(rowSums(A1)==0)
sum(colSums(A1)==0)
k = 6
result[k,1] = system.time(rsim(A1))[1]
result[k,2] = system.time(GMPR(A1))[1]
result[k,3] = system.time(med(A1))[1]
result[k,4] = system.time(css(A1))[1]
result[k,5] = system.time(tmm(A1))[1]
result[k,6] = system.time(tss(A1))[1]
result[k,7] = system.time(uq(A1))[1]
